// Generated by CoffeeScript 1.3.3
(function() {

  describe('defaults', function() {
    return it('should have defaults set initially, be able to change them and restore them', function() {
      var assert;
      assert = function(value) {
        return expect(lean.defaults.bindable).toBe(value);
      };
      assert(true);
      lean.defaults.bindable = false;
      assert(false);
      lean.defaults.restore();
      return assert(true);
    });
  });

  describe('helper', function() {
    var dom, helper;
    dom = null;
    helper = null;
    beforeEach(function() {
      dom = fixture(fixtures.simpleview);
      window.app = {
        model: {
          person: lean.model({
            id: 1234,
            firstName: 'Derek',
            lastName: 'Santos',
            phone: '555-555-5555',
            email: 'test@leanjs.org',
            address: lean.model({
              street: '123 fake street',
              city: 'Toronto',
              country: 'Canada',
              zip: 12345
            })
          })
        }
      };
      return helper = lean.helper('simpleView', dom);
    });
    afterEach(function() {
      return delete window['app'];
    });
    it('should initialize a helper object with nested element references named by id.', function() {
      expect(helper.title.element.nodeName).toBe('H2');
      expect(helper.personTable.element.nodeName).toBe('TABLE');
      expect(helper.personTable.addressCell.street.element.nodeName).toBe('SPAN');
      expect(helper.personTable.addressCell.cityAndCountry.element.nodeName).toBe('SPAN');
      return expect(helper.personTable.addressCell.zip.element.nodeName).toBe('SPAN');
    });
    it('should set model objects on helper and nested helpers', function() {
      var addressCell, model, person;
      person = app.model.person;
      expect(helper.model.id).toBe(person.id);
      addressCell = helper.personTable.addressCell;
      model = addressCell.model;
      expect(model.street).toBe(person.address.street);
      expect(addressCell.street.model.street).toBe(person.address.street);
      expect(addressCell.cityAndCountry.model.city).toBe(person.address.city);
      expect(addressCell.cityAndCountry.model.country).toBe(person.address.country);
      return expect(addressCell.zip.model.zip).toBe(person.address.zip);
    });
    return it('should initiaize bindings for helper', function() {
      var address, person, runExpectations;
      person = app.model.person;
      address = person.address;
      runExpectations = function() {
        var addressCell, html;
        expect(helper.title.element.innerText).toBe("" + person.firstName + " " + person.lastName);
        html = helper.personTable.element.innerHTML;
        expect(html).toMatch(person.phone);
        expect(html).toMatch(person.email);
        addressCell = helper.personTable.addressCell;
        expect(addressCell.street.element.innerText).toBe("" + address.street + ",");
        expect(addressCell.cityAndCountry.element.innerText).toBe("" + address.city + ", " + address.country + ",");
        return expect(addressCell.zip.element.innerText).toBe("" + address.zip);
      };
      runExpectations();
      person.phone = '555-111-2222';
      person.email = 'fake@leanjs.org';
      address.street = '987 not fake street';
      address.city = 'Miami';
      address.country = 'USA';
      address.zip = 9876;
      return runExpectations();
    });
  });

  describe('model', function() {
    var expectation, model;
    model = null;
    expectation = {
      title: 'LeanJS',
      body: 'A simple light framework.'
    };
    beforeEach(function() {
      return model = lean.model(expectation);
    });
    afterEach(function() {
      return model = null;
    });
    it('should initialize __fields object', function() {
      var key, value, _results;
      _results = [];
      for (key in expectation) {
        value = expectation[key];
        _results.push(expect(model.__fields[key]).toBe(value));
      }
      return _results;
    });
    it('should initialize getters and setters', function() {
      var key, value, _results;
      _results = [];
      for (key in expectation) {
        value = expectation[key];
        _results.push(expect(model[key]).toBe(value));
      }
      return _results;
    });
    it('should dispatch changed signal when a property changes', function() {
      var newTitle;
      newTitle = 'Changed Title';
      spyOn(model.changed, 'dispatch');
      model.title = newTitle;
      return expect(model.changed.dispatch).toHaveBeenCalledWith('title', newTitle, expectation.title);
    });
    it('should automatically update a property of destination object with a value from a model object', function() {
      var destination;
      destination = {
        output: ''
      };
      model.bind('title').to(destination, 'output');
      expect(destination.output).toBe('LeanJS');
      model.title = 'Binding';
      return expect(destination.output).toBe('Binding');
    });
    return it('should call a specified function when a property has changed using watch()', function() {
      var watcher;
      watcher = function(newValue, oldValue) {
        expect(newValue).toBe('new value');
        expect(oldValue).toBe('LeanJS');
        return expect(model.title).toBe('new value');
      };
      model.watch('title', watcher);
      return model.title = 'new value';
    });
  });

  describe('util', function() {
    beforeEach(function() {
      return window.app = {
        model: {
          test: {
            prop1: 'value1',
            prop2: 'value2'
          }
        }
      };
    });
    afterEach(function() {
      return delete window['app'];
    });
    it('should return true when a node object is of type 1 (an element node) and false otherwise', function() {
      var node;
      node = {
        nodeType: 1
      };
      expect(lean.util.isElementNode(node)).toBe(true);
      node = {
        nodeType: 2
      };
      return expect(lean.util.isElementNode(node)).toBe(false);
    });
    it('should return an object from the global scope from the specified path using dot notation', function() {
      var obj;
      obj = lean.util.getObject('app.model.test');
      expect(obj.prop1).toBe('value1');
      return expect(obj.prop2).toBe('value2');
    });
    return it('should return an object from a specified object using dot notation', function() {
      var result, root;
      root = {
        garage: {
          car: {
            parts: ['engine', 'door']
          }
        }
      };
      result = lean.util.getObject('garage.car.parts', root);
      return expect(result.length).toBe(2);
    });
  });

  fixtures.simpleview = "<div id=\"simpleView\" data-model=\"app.model.person\">\n	<h2 id=\"title\" data-bind=\"${firstName} ${lastName}\"></h2>\n	<table id=\"personTable\">\n		<tr>\n			<th>Phone #:</th>\n			<td data-bind=\"${phone}\"></td>\n		</tr>\n		<tr>\n			<th>Address:</th>\n			<td id=\"addressCell\" data-model=\"app.model.person.address\">\n				<span id=\"street\" data-bind=\"${street},\"></span><br/>\n				<span id=\"cityAndCountry\" data-bind=\"${city}, ${country},\"></span><br/>\n				<span id=\"zip\" data-bind=\"${zip}\"></span>\n			</td>\n		</tr>\n		<tr>\n			<th>Email:</th>\n			<td data-bind=\"${email}\"></td>\n		</tr>\n	</table>\n</div>";

}).call(this);
